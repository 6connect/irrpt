#!/usr/local/bin/php
<?php

$currentpath = dirname(realpath(__FILE__));
require("{$currentpath}/../conf/irrpt.conf");
require("{$currentpath}/../inc/irrquery.inc");
require("{$currentpath}/../inc/exclusions.inc");
require("{$currentpath}/../inc/aggregate.inc");
require("{$currentpath}/../inc/cvs.inc");
require("{$currentpath}/../inc/status.inc");
require("{$currentpath}/../inc/ipv6.inc");


$o_asn		= 0;			/* Default ASN to fetch: all */
$o_verbose      = 0;			/* Default to verbose off */
$o_4 = 0; /* Default to fetch both v4 and v6 by setting this to 0 */
$o_6 = 0; /* Default to fetch both v4 and v6 by setting this to 0 */
$irr		= new IRRQuery;		/* Open our IRRQuery class */
$cvs		= new CVS;		/* Open our CVS class */
$count		= 0;
$offset		= 0;
$o_quiet	= 0;
$o_cvs	= 1;

function track($file)
{
	global $cvs;
	global $cfg;

	if (($rev = $cvs->update($file)) == FALSE) {
		status(STATUS_ERROR, "Error: Unable to perform CVS update.");
		return FALSE;
	}

	if ($rev['old'] == "0.00")
		status(STATUS_INFO, sprintf("   - Importing %-45s version %s", $file, $rev['new']));
	else if ($rev['old'] != $rev['new'])
		status(STATUS_INFO, sprintf("   - Updating  %-45s version %s -> %s", $file, $rev['old'], $rev['new']));

	return $rev;
}

function update_email($file, $email, $asn, $object, $rev, $type)
{
	global $cvs;
	global $cfg;
	$content = "";

	if ($rev['old'] == $rev['new'])
		return;

	$headers  = "From: {$cfg['update']['from']}\n";
	$headers .= "Reply-To: {$cfg['update']['reply-to']}\n";
	$headers .= "Date: " . date("r") . "\n";

	if ($rev['old'] != "0.00") {
	        $content .= "Changes for AS{$asn} (object {$object}) ({$type}):\n\n";
	        $content .= $cvs->get_diff($file, $rev);
        	$content .= "\n\n";
		$subject = $cfg['update']['subject'] . "AS{$asn} ({$type} Changes)";
	} else
		$subject = $cfg['update']['subject'] . "AS{$asn} ({$type} Initial Import)";

        $content .= "Complete list for AS{$asn} (object {$object}) ({$type}):\n";
        $content .= $cvs->get_complete($file);


	if (!($email == "-" || $email == "none" || $email == "NULL")) {
		status(STATUS_INFO, "   - Sending update notification to {$email}");
	        mail($email, $subject, $content, $headers);
	}

        if (isset($cfg['update']['localcopy']))
                mail($cfg['update']['localcopy'], $subject, $content, $headers);
}


function process_v4($irr, $object, $routefile4, $aggfile4)
{
	global $cfg;

  $routes4 = array();
  $asnlist4 = array();

  $resolve_v4_result = resolve_v4($irr, $object);
  list($routes4, $asnlist4) = $resolve_v4_result;

	/* Strip out excluded routes that can not be registered */
	status(STATUS_NOTICE, "Filtering against excluded routes.");
	$routes4 = exclusions_filter($cfg['cfgfiles']['exclusions'], $routes4);

	/* Write the routes we've just looked up into a file */
	status(STATUS_NOTICE, "Writing routes to local database.");
  if (($output4 = fopen($routefile4, "w")) == FALSE) 
  {
    status(STATUS_WARNING, "Can not open IRRDB output file for {$asn}, skipping this record.");
    continue;
  }
  for($i = 0; $i < sizeof($routes4); $i++)
  {
 	  fwrite($output4, sprintf("%s\n", $routes4[$i]));
  }
  fclose($output4);
  chmod($routefile4, $cfg['cfgfiles']['umask']);

	/* Aggregate the route file */
	status(STATUS_NOTICE, "Aggregating v4 routes.");
  $aggregated_routes4 = aggregate_routes($routefile4);

  /* print result to a file */
  if (($afile4 = fopen($aggfile4, "w")) == FALSE)
  {
    status(STATUS_WARNING, "Can not open agg route file, skipping this record..");
    continue;
  }

  for ($i = 0; $i < sizeof($aggregated_routes4); $i++)
  {
    fwrite($afile4, "$aggregated_routes4[$i]");
  }
  fclose($afile4);
  chmod($aggfile4, $cfg['cfgfiles']['umask']);

  return $asnlist4;
}

function process_v6($irr, $object, $routefile6, $aggfile6)
{
	global $cfg;

  $routes6 = array();
  $asnlist6 = array();

  $resolve_v6_result = resolve_v6($irr, $object);
  list($routes6, $asnlist6) = $resolve_v6_result;

	/* Strip out excluded routes that can not be registered */
	status(STATUS_NOTICE, "Filtering against excluded routes.");
	$routes6 = exclusions_filter($cfg['cfgfiles']['exclusions'], $routes6);

	/* Write the routes we've just looked up into a file */
	status(STATUS_NOTICE, "Writing routes to local database.");
  if (($output6 = fopen($routefile6, "w")) == FALSE) 
  {
		status(STATUS_ERROR, "Can not open IRRDB output file for {$asn}, skipping this record.");
  	continue;
  }
  for($i = 0; $i < sizeof($routes6); $i++)
  {
		fwrite($output6, sprintf("%s\n", $routes6[$i]));
  }
	fclose($output6);
  chmod($routefile6, $cfg['cfgfiles']['umask']);

	/* Aggregate the route file */
	status(STATUS_NOTICE, "Aggregating v6 routes.");
  $aggregated_routes6 = aggregate_routes($routefile6);

  /* print result to a file */
  if (($afile6 = fopen($aggfile6, "w")) == FALSE)
  {
    status(STATUS_ERROR, "Can not open agg route file, aborting.");
    continue;
  }
  for ($i = 0; $i < sizeof($aggregated_routes6); $i++)
  {
    fwrite($afile6, "$aggregated_routes6[$i]");
  }
  fclose($afile6);
  chmod($aggfile6, $cfg['cfgfiles']['umask']);

  return $asnlist6;
}

function process_as($asn, $count, $object, $irr, $email)
{
  global $cvs;
  global $cfg;

 /* Skip invalid ASNs */
  if ($asn < 1)
  {
    status(STATUS_ERROR, "ASN $asn invalid, skipping.");
    return;
  }

  if (($asn > 64512) && ($asn < 131072))
  {
    status(STATUS_ERROR, "ASN $asn invalid, skipping.");
    return;
  }

  $count++;

	if( $o_quiet == 0 )
		status(STATUS_INFO, "Processing AS{$asn} (Record {$count})");

	/* Figure out if we have an AUT-NUM or an AS-SET, and resolve it */
	status(STATUS_NOTICE, "Querying IRR Object {$object}");

  /* init files */
	$routefile4 = $cfg['paths']['db'] . $asn . ".4";
	$aggfile4 = $routefile4 . $cfg['aggregate']['suffix'];
	$routefile6 = $cfg['paths']['db'] . $asn . ".6";
	$aggfile6 = $routefile6 . $cfg['aggregate']['suffix'];

  /* call v4 / v6 processing and aggregation */
  $asnlist4 = array();
  $asnlist6 = array();

  if( $o_4 == 1 && $o_6 == 0 )
  {
	  status(STATUS_NOTICE, "Fetching v4 routes.");
    $asnlist4 = process_v4($irr, $object, $routefile4, $aggfile4);
  }
  elseif( $o_6 == 1 && $o_4 == 0 )
  {
	  status(STATUS_NOTICE, "Fetching v6 routes.");
    $asnlist6 = process_v6($irr, $object, $routefile6, $aggfile6);
  }
  else
  {
	  status(STATUS_NOTICE, "Fetching v4 routes.");
    $asnlist4 = process_v4($irr, $object, $routefile4, $aggfile4);
	  status(STATUS_NOTICE, "Fetching v6 routes.");
    $asnlist6 = process_v6($irr, $object, $routefile6, $aggfile6);
  }

  /* merge files into common v4 & v6 file */
	$routefile = $cfg['paths']['db'] . $asn;
	$aggfile = $routefile . $cfg['aggregate']['suffix'];
  system("cat {$routefile4} {$routefile6} > {$routefile}");
  system("cat {$aggfile4} {$aggfile6} > {$aggfile}");

	/* Log the ASNs behind this object, for future AS-PATH use */
  $asnlist = array_merge($asnlist4, $asnlist6);
	$asnfile = $routefile . $cfg['fetch']['asn_suffix'];
	status(STATUS_NOTICE, "Writing ASN list to local database.");
	if (($output = fopen($asnfile, "w")) == FALSE) 
  {
		status(STATUS_ERROR, "Can not open ASN list output file for {$asn}, skipping this record.");
		continue;
	}
	for($i = 0; $i < sizeof($asnlist); $i++)
  {
		fwrite($output, sprintf("%s\n", preg_replace("/[aA][sS]/", "", $asnlist[$i])));
  }
	fclose($output);
  chmod($asnfile, $cfg['cfgfiles']['umask']);

	/* Perform CVS tracking */
  if ($o_cvs == 1 )
  {
	  status(STATUS_NOTICE, "Tracking data in CVS.");
  	$cvs->init($cfg['paths']['cvsroot']);

	  $rev = track($routefile);
  	$rev = track($routefile4);
	  $rev = track($routefile6);
  	$rev = track($aggfile);
	  $rev = track($aggfile4);
  	$rev = track($aggfile6);

	  /* Send e-mail updates */
	  status(STATUS_NOTICE, "Send update email.");
  	switch ($cfg['fetch']['emailonchange']) {
	      case "both":
		  update_email($routefile, $email, $asn, $object, $rev, "Full");
	  	update_email($aggfile, $email, $asn, $object, $rev, "Aggregated");
  		break;
	      case "full":
	  	update_email($routefile, $email, $asn, $object, $rev, "Full");
  		break;
	      case "aggregate":
	  	update_email($aggfile, $email, $asn, $object, $rev, "Aggregated");
  		break;
	      case "none":
	      case "no":
		  break;
	  }
  }
}


/********** PROCESSING STARTS HERE *********/


/* Set UID specified in the config file */
if (posix_geteuid() == 0) {
	if ($cfg['fetch']['set_uid']) {
		if (!($user = posix_getpwnam($cfg['fetch']['set_uid'])))
			$user = posix_getpwuid($cfg['fetch']['set_uid']);

		if (!$user) {
			printf("Unable to change to the specified UID, aborting.\n");
			exit(1);
		}

		posix_setuid($user['uid']);
		posix_seteuid($user['uid']);
	}
}


/* Parse through the cmdline options. */
for ($offset = 1; $offset < $_SERVER['argc']; $offset++) 
{
	if (substr($_SERVER['argv'][$offset], 0, 1) != "-")
		break;

	switch($_SERVER['argv'][$offset]) {
	    case "-h":
	    case "--help":
		printf("Usage: %s [-h46qv] [-f file] [--nocvs] [asn]\n", $_SERVER['argv'][0]);
		exit(1);
	    case "-q":
	    case "--quiet":
		$o_quiet = 1;
		break;
	    case "-v":
	    case "--verbose":
		$o_verbose = 1;
		break;
	    case "--nocvs":
		$o_cvs = 0;
		break;
	    case "-4":
	    case "--4":
		$o_4 = 1;
		break;
	    case "-6":
	    case "--6":
		$o_6 = 1;
		break;
	    case "-f":
	    case "--file":
		$o_irrdb = $_SERVER['argv'][$offset+1];
    $offset++;
		break;
	}
}

if (isset($_SERVER['argv'][$offset+0]))
{
	$o_asn = intval($_SERVER['argv'][$offset+0]);
}

/* Set Timezone */
date_default_timezone_set($cfg['global']['timezone']);

/* Set Memory Limit */
ini_set("memory_limit",$cfg['global']['memory_limit']);

/* Open the file with the list of IRR objects we will be tracking */
/* provided via command line or through the config file */
if ($o_irrdb)
{
  $cfg['cfgfiles']['irrdb_list'] = $o_irrdb;
}

/* Establish a connection with our IRR Query whois server */
if ($irr->connect($cfg['fetch']['host'], $cfg['fetch']['port']) == FALSE) 
{
	status(STATUS_ERROR, "Unable to connect to IRR Query whois server, aborting.");
	exit(-1);
}

/* Optionally enable a local cache of prefixes per aut-num record */
if ($cfg['fetch']['cache']) {
	$irr->cache_set(TRUE);
}

/* If we don't want to query all IRR sources, set the new sources now */
if ($cfg['fetch']['sources'] != "all")
{
	$irr->set_sources($cfg['fetch']['sources']);
}

if ($o_asn != 0)
{
  if (preg_match("/^AS./", $o_asn) == 0) 
  {
    $object= 'AS'.$o_asn;
  } else {
    $object = $o_asn;
  }
  $asn = $o_asn;
  process_as($asn, $count, $object, $irr, 'none');
}

else 
{

  if (!($irrdb = fopen($cfg['cfgfiles']['irrdb_list'], "r"))) 
  {
	  status(STATUS_ERROR, "Unable to open irrdb config file, aborting.");
	  exit(-1);
  }

  /* Parse the IRRDB config file */
  while (!feof($irrdb)) 
  {
    $line		= rtrim(fgets($irrdb, 256));

    /* Skip comments and junk lines */
    if ((strlen($line) == 0) || ($line[0] == "#"))
      continue;

    $results	= preg_split( "/[ \t]+/", $line);
    $asn		= $results[0];
    $object		= $results[1];
    $email		= $results[2];

    process_as($asn, $count, $object, $irr, $email);
  }
  fclose($irrdb); 
}

if( $o_quiet == 1 )
{
    status(STATUS_INFO, "Completed processing of {$count} IRR object(s).");
}


?>
